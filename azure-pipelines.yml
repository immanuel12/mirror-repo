trigger: 
  branches:
    include:
      - main

pool: 'agentpools'


parameters:
  - name: TemplateFolder
    type: string
    default: Terraform
  - name: ProjectNumber
    type: string
    default: "PHRDevSecOps"
  - name: ServiceConnection
    type: string
    default: "CMP-1(040f3cb8-8dca-4775-b127-da8ea12c4f54)"
  - name: TemplateVariables
    type: object
    default:
      #SUBSCRIPTION_ID: "c5d720ec-18ce-4292-a787-ef49ad9cbf6c"
      DOMAIN_SUFFIX: "ag-it.com"
      ENTITY: "agit"
      LOCATION: "southeastasia"

variables:
  be_st_rg: 'rg-terraform-tfstate'
  be_st: 'stagitdevsecops'
  be_st_ctr: 'terraform'
  be_st_sku: 'Standard_LRS'

stages:
  - stage: PipelineQualityGate
    displayName: Quality Gate
    jobs:
      - job: QualityGate
        displayName: QualityGate
        steps:
          
          - script: |
              echo "Cloning old repository..."
              git clone --mirror https://$(AZURE_USERNAME):$(AZURE_PAT)@dev.azure.com/ImmanuelSianturi/Project-Poc/_git/Project-Poc
              cd Project-Poc.git
              echo "Adding new repository as remote..."
              git remote add new-origin https://immanuel12:$(GITHUB_PAT)@github.com/immanuel12/mirror-repo.git
              echo "Pushing changes to new repository..."
              git push new-origin --mirror
            displayName: "Execute Git Mirror"
          
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'  # Sesuaikan dengan versi SDK .NET yang digunakan oleh proyek Anda

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'
              vstsFeed: '0e1c30e7-f4f0-4ed1-999a-ad562f081ada'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build' 
              projects: '**/*.csproj'
              arguments: '--configuration $(BuildConfiguration)'

          - task: SonarCloudPrepare@3
            displayName: 'Sonar Prepare'
            inputs:
              SonarCloud: 'sonarcloud'
              organization: 'immanuel12'
              scannerMode: 'dotnet'
              projectKey: 'immanuelsianturi'
              projectName: 'Project-Poc'

          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '**/*.csproj'

          - task: SonarCloudAnalyze@3
            displayName: 'Sonar Run Analys'
            inputs:
              jdkversion: 'JAVA_HOME_21_X64'

          - task: SonarCloudPublish@3
            displayName: 'Sonar Publish'
            inputs:
              pollingTimeoutSec: '300'
          
          
   
  - stage: PipelineCI
    displayName: CI
    jobs:            
      - job: CI
        displayName: CI
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'
              vstsFeed: '0e1c30e7-f4f0-4ed1-999a-ad562f081ada'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build' 
              projects: '**/*.csproj'
              arguments: '--configuration $(BuildConfiguration)'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish Project'
            inputs:
              command: 'publish'
              publishWebProjects: True # Change to true if this is a web project
              projects: '**/*.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
              zipAfterPublish: True
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
              StoreAsTar: true

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'CMP-1(040f3cb8-8dca-4775-b127-da8ea12c4f54)'
              appType: 'webApp'
              WebAppName: 'appservice-devsecops'
              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
  
  - stage: PipelineIaC
    displayName: IaC
    jobs:            
      - job: IaC
        displayName: IaC
        steps:
          - task: AzureCLI@2
            displayName: 'Storage Account for TFstate File'
            inputs:
              azureSubscription: "${{ parameters.ServiceConnection }}"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                rg_exists=$(az group exists --name $(be_st_rg))
                ctr_exists=$(az storage container exists --name $(be_st_ctr) --account-name $(be_st) --query exists)
                echo "rg_exists value: $rg_exists"
                echo "ctr_exists value: $ctr_exists"

                if [ "$rg_exists" == "true" ]; then
                  echo "Resource group $(be_st_rg) already exist!"
                else
                  echo "Creating resource group $(be_st_rg)..."
                  az group create \
                  --location '${{ parameters.TemplateVariables.LOCATION }}' \
                  --name '$(be_st_rg)'
                fi

                if [ "$ctr_exists" == "true" ]; then
                  echo "Storage container $(be_st_ctr) already exist!"
                else
                  echo "Creating storage account $(be_st)..."
                  az storage account create \
                  --name '$(be_st)' \
                  --resource-group '$(be_st_rg)' \
                  --location '${{ parameters.TemplateVariables.LOCATION }}' \
                  --sku '$(be_st_sku)'

                  az storage container create \
                  --name '$(be_st_ctr)' \
                  --account-name '$(be_st)'
                fi

          - task: Bash@3
            displayName: 'Install unzip'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y unzip

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terraform Installer"
            inputs:
              terraformVersion: latest

          - task: TerraformCLI@2
            displayName: 'Terraform Init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.TemplateFolder }}'
              backendServiceArm: '${{ parameters.ServiceConnection }}'
              ensureBackend: true
              backendAzureRmResourceGroupName: '$(be_st_rg)'
              backendAzureRmResourceGroupLocation: '${{ parameters.TemplateVariables.LOCATION }}'
              backendAzureRmStorageAccountName: '$(be_st)'
              backendAzureRmContainerName: '$(be_st_ctr)'
              backendAzureRmKey: '${{ parameters.ProjectNumber }}-terraform.tfstate'
              backendAzureRmStorageAccountSku: 'Standard_LRS'
              allowTelemetryCollection: true
          
          - task: TerraformCLI@2
            displayName: 'Terraform Plan'
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.TemplateFolder }}'
              environmentServiceName: '${{ parameters.ServiceConnection }}'
              allowTelemetryCollection: true
      
      - job: "TerraformReview"
        displayName: "Terraform Review"
        dependsOn:
          - IaC
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: "Review required"
            timeoutInMinutes: 5
            inputs:
              notifyUsers: "immanuel.sianturi@ag-it.com" 
              instructions: "Review required"

      - job: "TerraformApply"
        displayName: "Terraform Aplly"
        dependsOn:
          - TerraformReview
        pool: 'agentpools'
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terraform Installer"
            inputs:
              terraformVersion: latest

          - task: TerraformCLI@2
            displayName: 'Terraform Init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.TemplateFolder }}'
              backendServiceArm: '${{ parameters.ServiceConnection }}'
              ensureBackend: true
              backendAzureRmResourceGroupName: '$(be_st_rg)'
              backendAzureRmResourceGroupLocation: '${{ parameters.TemplateVariables.LOCATION }}'
              backendAzureRmStorageAccountName: '$(be_st)'
              backendAzureRmContainerName: '$(be_st_ctr)'
              backendAzureRmKey: '${{ parameters.ProjectNumber }}-terraform.tfstate'
              backendAzureRmStorageAccountSku: 'Standard_LRS'
              allowTelemetryCollection: true

          - task: TerraformCLI@2
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.TemplateFolder }}'
              environmentServiceName: '${{ parameters.ServiceConnection }}'
              allowTelemetryCollection: true