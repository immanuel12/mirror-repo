trigger: 
  branches:
    include:
      - main

pool: 'agentpool'


parameters:
  - name: Directory
    type: string
    default: Terraform
# variables:
#   system.debug: true

stages:
  - stage: PipelineQualityGate
    displayName: Quality Gate
    jobs:
      - job: QualityGate
        displayName: QualityGate
        steps:
          
          - script: |
              echo "Cloning old repository..."
              git clone --mirror https://$(AZURE_USERNAME):$(AZURE_PAT)@dev.azure.com/ImmanuelSianturi/Project-Poc/_git/Project-Poc
              cd Project-Poc.git
              echo "Adding new repository as remote..."
              git remote add new-origin https://immanuel12:$(GITHUB_PAT)@github.com/immanuel12/mirror-repo.git
              echo "Pushing changes to new repository..."
              git push new-origin --mirror
            displayName: "Execute Git Mirror"
          
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'  # Sesuaikan dengan versi SDK .NET yang digunakan oleh proyek Anda

          # - task: DotNetCoreCLI@2
          #   displayName: 'Restore'
          #   inputs:
          #     command: 'restore'
          #     projects: '**/*.csproj'
          #     feedsToUse: 'select'
          #     vstsFeed: '0e1c30e7-f4f0-4ed1-999a-ad562f081ada'
          
          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.sln'
              feedsToUse: 'select'
              vstsFeed: '0e1c30e7-f4f0-4ed1-999a-ad562f081ada'

          # - task: DotNetCoreCLI@2
          #   displayName: 'Build Project'
          #   inputs:
          #     command: 'build'
          #     projects: '**/*.csproj'
          #     arguments: '--configuration Release'
          
          - task: DotNetCoreCLI@2
            displayName: 'Build Project'
            inputs:
              command: 'build'
              projects: '**/*.sln'
              arguments: '--configuration Release'

          # - task: DotNetCoreCLI@2
          #   displayName: 'Run Unit Tests'
          #   inputs:
          #     command: 'test'
          #     projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: '**/*.sln'
          
          - task: SonarCloudPrepare@3
            displayName: 'Sonar Prepare'
            inputs:
              SonarCloud: 'sonarcloud'
              organization: 'immanuel12'
              scannerMode: 'dotnet'
              projectKey: 'ImmanuelSianturi_Project-Poc'
              projectName: 'Project-Poc'
          
          - task: SonarCloudAnalyze@3
            displayName: 'Sonar Run Analys'
            inputs:
              jdkversion: 'JAVA_HOME_21_X64'

          - task: SonarCloudPublish@3
            displayName: 'Sonar Publish'
            inputs:
              pollingTimeoutSec: '300'
          
          
   
  - stage: PipelineCI
    displayName: CI
    jobs:            
      - job: CI
        displayName: CI
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'NuGet Authenticate'

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              feedsToUse: 'select'
              vstsFeed: '0e1c30e7-f4f0-4ed1-999a-ad562f081ada'
              # nugetConfigPath: |
              #   HelloWorldApp/nuget.config
              #   HelloWorldApp.Tests/nuget.config

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build' 
              projects: |
                HelloWorldApp/HelloWorldApp.csproj
                HelloWorldApp.Tests/HelloWorldApp.Tests.csproj
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

          - task: DotNetCoreCLI@2
            displayName: 'Pack Project'
            inputs:
              command: 'pack'
              projects: '**/*.csproj'
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish Project'
            inputs:
              command: 'publish'
              publishWebProjects: false # Change to true if this is a web project
              projects: '**/*.csproj'
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
              StoreAsTar: true
  
  - stage: PipelineCD
    displayName: CD
    jobs:            
      - job: CD
        displayName: CD
        steps:
          - task: Bash@3
            displayName: 'Install unzip'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y unzip

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terraform Installer"
            inputs:
              terraformVersion: latest

          - task: TerraformCLI@2
            displayName: 'Terraform Init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.Directory }}'
              backendServiceArm: 'CMP-1(040f3cb8-8dca-4775-b127-da8ea12c4f54)'
              ensureBackend: true
              backendAzureRmTenantId: '28c4ac60-7fdf-4ab1-b3fc-8abb83bdb75b'
              backendAzureRmSubscriptionId: '040f3cb8-8dca-4775-b127-da8ea12c4f54'
              backendAzureRmResourceGroupName: 'rg-agent'
              backendAzureRmResourceGroupLocation: 'southeastasia'
              backendAzureRmStorageAccountName: 'stpocdevsecops'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'tf/terraform.tfstate'
              backendAzureRmStorageAccountSku: 'Standard_LRS'
              allowTelemetryCollection: true
          
          - task: TerraformCLI@2
            displayName: 'Terraform Plan'
            inputs:
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.Directory }}'
              environmentServiceName: 'CMP-1(040f3cb8-8dca-4775-b127-da8ea12c4f54)'
              providerAzureRmSubscriptionId: '040f3cb8-8dca-4775-b127-da8ea12c4f54'
              allowTelemetryCollection: true

          - task: TerraformCLI@2
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.Directory }}'
              environmentServiceName: 'CMP-1(040f3cb8-8dca-4775-b127-da8ea12c4f54)'
              providerAzureRmSubscriptionId: '040f3cb8-8dca-4775-b127-da8ea12c4f54'
              allowTelemetryCollection: true